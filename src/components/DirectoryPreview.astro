---
import { scanDirectory } from '@/util/filescan';
import FileEntryItem from './FileEntryItem.astro';
import FilePreview from './FilePreview.astro';

interface Props {
    path: string,
    showDate: boolean,
}

const { path, showDate } = Astro.props;

const isRoot = path === '/';
const items = scanDirectory(path);

const readme = items.filter(val => val.type === 'file').find(val => val.path.toLowerCase().startsWith("readme")) ?? null;

if (!isRoot) items.push({ path: '../', type: 'directory' });
---

<ul class="list bg-base-100 rounded-box shadow-md">
    {items
        .filter(v => v.path)
        .sort((a, b) => a.type.localeCompare(b.type) || a.path.localeCompare(b.path))
        .map(item => {
            return (<FileEntryItem parent={path} {...item} showDate={showDate} />);
        })
    }

    {!items && (
            <li class="p-4 pb-2 text-xs opacity-60 tracking-wide">This directory is empty.</li>
        <p>This directory is empty.</p>
    )}
</ul>

{ readme && (
    <FilePreview path={readme.path} renderIfEmpty={false} />
) }

<style>
    .file-list { 
        display: grid;
        grid-template-rows: repeat(minmax(50px, 1fr));
        gap: 10px;
        list-style: none;
        padding: 0;
    }
</style>