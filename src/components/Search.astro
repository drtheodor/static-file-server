---
import SearchIcon from '@/assets/icons/search.svg';
---

<div class="dropdown dropdown-end w-full">
  <label class="input w-full">
    <SearchIcon class="h-[1em] opacity-50" />
    <input type="search" id="searchInput" required placeholder="Search" autocomplete="off" />
    <kbd class="kbd">Ctrl</kbd><kbd class="kbd">K</kbd>
  </label>
  <ul id="searchResults" class="menu dropdown-content bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm w-full"></ul>
</div>

<style>
  .search-container {
    padding: 10px;
    width: 100%;
    margin-top: 20px;
  }

  .results-info {
    margin-bottom: 10px;
    font-size: 14px;
  }


  .highlight {
    background-color: yellow;
    font-weight: bold;
  }

  .no-results {
    text-align: center;
    padding: 20px;
  }
</style>

<script>
  import { staticBrowse, staticPermalink } from "@/util/link";

  type FileEntry = { path: string }

  let files: FileEntry[];

  // Load files from JSON file
  async function loadFiles() {
    try {
      const response = await fetch(staticPermalink('files.json'));
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      files = await response.json();
      console.log(`Loaded ${files.length} files`);
    } catch (error) {
      console.error('Error loading files:', error);
      // Fallback to empty array or show error message
      files = [];
    }
  }

  document.addEventListener("keydown", (event) => {
    if (event.ctrlKey && event.key === "k") {
      event.preventDefault(); // Prevent default browser behavior (e.g., opening a search bar)

      const list = document.getElementById('searchInput') as HTMLElement;
      list.focus();
    }
  });

  // Wait for DOM to load, then load files and set up search
  document.addEventListener('astro:page-load', async () => {
    await loadFiles();
    setupSearch();
  });

  // Configuration
  const MAX_RESULTS = 50;
  const MIN_SEARCH_LENGTH = 3;

  function fuzzySearch(query: string, items: FileEntry[]) {
    if (!query || query.length < MIN_SEARCH_LENGTH) {
      return [];
    }
    
    const results = items.filter(item => {
      const lowerQuery = query.toLowerCase();
      const lowerItem = item.path.toLowerCase();
      
      let queryIndex = 0;
      for (let i = 0; i < lowerItem.length && queryIndex < lowerQuery.length; i++) {
        if (lowerItem[i] === lowerQuery[queryIndex]) {
          queryIndex++;
        }
      }
      return queryIndex === lowerQuery.length;
    });
    
    return results.slice(0, MAX_RESULTS);
  }

  function addResult(text: string, url: string, list: HTMLElement) {
    const li = document.createElement('li');
    li.innerHTML = `<a href="${url ? staticBrowse(url) : ''}">${text}</a>`;
    list.appendChild(li);
  }

  function displayResults(results: any[], query: string) {
    const list = document.getElementById('searchResults') as HTMLElement;
    list.innerHTML = '';
    
    if (!query || query.length < MIN_SEARCH_LENGTH) {
      addResult('Press Enter to go to the first result.', '', list);
      return;
    }
    
    if (results.length === 0) {
      addResult('Nothing found.', '', list);
      return;
    }

    results.map(v => v.path).reverse().forEach(file => addResult(file, file, list));
  }

  function setupSearch() {
    const input = document.getElementById('searchInput') as HTMLInputElement;

    let searchTimeout: any;

    input.addEventListener('input', ({ target }) => {
      clearTimeout(searchTimeout);
      
      searchTimeout = setTimeout(() => {
        const query = target!.value;
        const results = fuzzySearch(query, files);
        displayResults(results, query);
      }, 150);
    });

    input.addEventListener('keyup', (e) => {
      if (e.key === 'Enter') {
        const result = document.getElementById('searchResults') as HTMLElement;
        const anchor = result.querySelector('a') as HTMLAnchorElement;

        if (window.location.href !== anchor.href) {
          window.location.href = anchor.href;
        }
      }
    });

    displayResults([], '');
  }
</script>